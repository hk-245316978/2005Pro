{"version":3,"sources":["file:///D:/Users/cocos/MirClent/assets/script/MoveSprite.ts"],"names":["_decorator","Input","Component","Node","PolygonCollider2D","Intersection2D","UITransform","v3","v2","ccclass","property","eventTarget","EventTarget","isActive","isMoving","startPoint","mousePoint","start","onLoad","node","on","EventType","MOUSE_DOWN","event_mouse_down","backpack","MOUSE_MOVE","event_mouse_move","MOUSE_UP","event_mouse_up","MOUSE_LEAVE","onDestroy","off","event","active","getPosition","getUILocation","collider","getComponent","setSiblingIndex","downPoint","nodePoint","convertToNodeSpaceAR","x","y","points","is","pointInPolygon","preventSwallow","movePointN","getLocation","setPosition","showandhide","emit"],"mappings":"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","sourcesContent":["import { _decorator, input, Input, Component, Node, PolygonCollider2D, Intersection2D, UITransform, v3, v2} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nconst eventTarget = new EventTarget();\r\n\r\n\r\n@ccclass('MoveSprite')\r\nexport default class  extends Component {\r\n\r\n    // 状态\r\n    isActive: boolean = false;\r\n    isMoving: boolean = true;\r\n    startPoint;\r\n    mousePoint;\r\n\r\n    @property(Node)\r\n    backpack: Node | null = null;\r\n\r\n    start() {\r\n        // this.node.on(Node.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n        // this.node.on(Node.EventType.MOUSE_LEAVE, this.event_mouse_up, this);\r\n    }\r\n\r\n    onLoad () {\r\n        this.node.on(Input.EventType.MOUSE_DOWN, this.event_mouse_down, this);\r\n        // this.node.on(Node.EventType.MOUSE_MOVE, this.event_mouse_move, this);\r\n        // this.node.on(Node.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n        // 父节点监听移动，防止移动过快断触\r\n        this.backpack.on(Input.EventType.MOUSE_MOVE, this.event_mouse_move, this);\r\n        this.backpack.on(Input.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n        this.backpack.on(Input.EventType.MOUSE_LEAVE, this.event_mouse_up, this);\r\n        // 窗口外监听鼠标弹起，防止弹起后进入窗口跟随鼠标移动\r\n        // input.on(Input.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n    }\r\n\r\n    onDestroy () {\r\n        this.node.off(Input.EventType.MOUSE_DOWN, this.event_mouse_down, this);\r\n        // this.node.off(Node.EventType.MOUSE_MOVE, this.event_mouse_move, this);\r\n        // this.node.off(Input.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n        this.backpack.off(Input.EventType.MOUSE_MOVE, this.event_mouse_move, this);\r\n        this.backpack.off(Node.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n        this.backpack.off(Input.EventType.MOUSE_LEAVE, this.event_mouse_up, this);\r\n        // input.off(Input.EventType.MOUSE_UP, this.event_mouse_up, this);\r\n    }\r\n\r\n    event_mouse_down(event){\r\n        this.backpack.active = true;\r\n        \r\n        this.startPoint = this.node.getPosition();\r\n        this.mousePoint = event.getUILocation();\r\n        // 获取碰撞组件\r\n        const collider = this.node.getComponent(PolygonCollider2D);\r\n        // 如果没有碰撞组件直接返回\r\n        if (!collider) {\r\n            // 设置当前节点在父节点的 children 数组中的位置，使节点保持在最高层，不会被其他的节点覆盖\r\n            this.node.setSiblingIndex(10);\r\n            this.isActive = true;\r\n            return;\r\n        }\r\n        // 点击位置的坐标\r\n        const downPoint = event.getUILocation();\r\n        // 把UI窗口内的坐标位置转换成节点为中心点的坐标\r\n        const nodePoint = this.node.getComponent(UITransform).convertToNodeSpaceAR(v3(downPoint.x,downPoint.y));\r\n        // 多边形的顶点\r\n        const points = collider.points;\r\n        // 获取点击位置的坐标是否在多边形内\r\n        const is = Intersection2D.pointInPolygon(v2(nodePoint.x,nodePoint.y), points);\r\n        if (is) {\r\n            this.node.setSiblingIndex(10);\r\n            this.isActive = true;\r\n            // 如果点击的图形区域设置事件不可穿透\r\n            event.preventSwallow = false;\r\n        }else{\r\n            // 如果点击的是透明区域设置事件可穿透\r\n            event.preventSwallow = true;\r\n        }\r\n\r\n    }\r\n\r\n    event_mouse_move(event){\r\n        if(this.isMoving && this.isActive){\r\n            let movePointN = v2(event.getLocation().x - this.mousePoint.x,event.getLocation().y - this.mousePoint.y);\r\n            this.node.setPosition(this.startPoint.x + movePointN.x,this.startPoint.y + movePointN.y);\r\n        }\r\n    }\r\n\r\n    event_mouse_up(){\r\n        this.backpack.active = false;\r\n        this.isActive = false;\r\n    }\r\n\r\n    showandhide() {\r\n        if (this.node.active) {\r\n            this.node.active = false;\r\n            this.node.emit('fade-out');\r\n        } else {\r\n            this.node.active = true;\r\n            this.node.emit('fade-in');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}